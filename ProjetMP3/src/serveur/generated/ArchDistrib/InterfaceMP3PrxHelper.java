// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `InterfaceMP3.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ArchDistrib;

public final class InterfaceMP3PrxHelper extends Ice.ObjectPrxHelperBase implements InterfaceMP3Prx
{
    private static final String __addSong_name = "addSong";

    public void addSong(String name, String artist, String path)
    {
        addSong(name, artist, path, null, false);
    }

    public void addSong(String name, String artist, String path, java.util.Map<String, String> __ctx)
    {
        addSong(name, artist, path, __ctx, true);
    }

    private void addSong(String name, String artist, String path, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _InterfaceMP3Del __del = (_InterfaceMP3Del)__delBase;
                    __del.addSong(name, artist, path, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path)
    {
        return begin_addSong(name, artist, path, null, false, null);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, java.util.Map<String, String> __ctx)
    {
        return begin_addSong(name, artist, path, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, Ice.Callback __cb)
    {
        return begin_addSong(name, artist, path, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addSong(name, artist, path, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, Callback_InterfaceMP3_addSong __cb)
    {
        return begin_addSong(name, artist, path, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, java.util.Map<String, String> __ctx, Callback_InterfaceMP3_addSong __cb)
    {
        return begin_addSong(name, artist, path, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addSong(String name, String artist, String path, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addSong_name, __cb);
        try
        {
            __result.__prepare(__addSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __os.writeString(artist);
            __os.writeString(path);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_addSong(Ice.AsyncResult __result)
    {
        __end(__result, __addSong_name);
    }

    private static final String __addTagSong_name = "addTagSong";

    public void addTagSong(int id, String name)
    {
        addTagSong(id, name, null, false);
    }

    public void addTagSong(int id, String name, java.util.Map<String, String> __ctx)
    {
        addTagSong(id, name, __ctx, true);
    }

    private void addTagSong(int id, String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addTagSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _InterfaceMP3Del __del = (_InterfaceMP3Del)__delBase;
                    __del.addTagSong(id, name, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addTagSong(int id, String name)
    {
        return begin_addTagSong(id, name, null, false, null);
    }

    public Ice.AsyncResult begin_addTagSong(int id, String name, java.util.Map<String, String> __ctx)
    {
        return begin_addTagSong(id, name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addTagSong(int id, String name, Ice.Callback __cb)
    {
        return begin_addTagSong(id, name, null, false, __cb);
    }

    public Ice.AsyncResult begin_addTagSong(int id, String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addTagSong(id, name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addTagSong(int id, String name, Callback_InterfaceMP3_addTagSong __cb)
    {
        return begin_addTagSong(id, name, null, false, __cb);
    }

    public Ice.AsyncResult begin_addTagSong(int id, String name, java.util.Map<String, String> __ctx, Callback_InterfaceMP3_addTagSong __cb)
    {
        return begin_addTagSong(id, name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addTagSong(int id, String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addTagSong_name, __cb);
        try
        {
            __result.__prepare(__addTagSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeString(name);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_addTagSong(Ice.AsyncResult __result)
    {
        __end(__result, __addTagSong_name);
    }

    private static final String __listSongs_name = "listSongs";

    public Song[] listSongs()
    {
        return listSongs(null, false);
    }

    public Song[] listSongs(java.util.Map<String, String> __ctx)
    {
        return listSongs(__ctx, true);
    }

    private Song[] listSongs(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "listSongs", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("listSongs");
                    __delBase = __getDelegate(false);
                    _InterfaceMP3Del __del = (_InterfaceMP3Del)__delBase;
                    return __del.listSongs(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_listSongs()
    {
        return begin_listSongs(null, false, null);
    }

    public Ice.AsyncResult begin_listSongs(java.util.Map<String, String> __ctx)
    {
        return begin_listSongs(__ctx, true, null);
    }

    public Ice.AsyncResult begin_listSongs(Ice.Callback __cb)
    {
        return begin_listSongs(null, false, __cb);
    }

    public Ice.AsyncResult begin_listSongs(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_listSongs(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_listSongs(Callback_InterfaceMP3_listSongs __cb)
    {
        return begin_listSongs(null, false, __cb);
    }

    public Ice.AsyncResult begin_listSongs(java.util.Map<String, String> __ctx, Callback_InterfaceMP3_listSongs __cb)
    {
        return begin_listSongs(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_listSongs(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__listSongs_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __listSongs_name, __cb);
        try
        {
            __result.__prepare(__listSongs_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Song[] end_listSongs(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __listSongs_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            Song[] __ret;
            __ret = SongSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __playSong_name = "playSong";

    public void playSong(int id)
    {
        playSong(id, null, false);
    }

    public void playSong(int id, java.util.Map<String, String> __ctx)
    {
        playSong(id, __ctx, true);
    }

    private void playSong(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "playSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _InterfaceMP3Del __del = (_InterfaceMP3Del)__delBase;
                    __del.playSong(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_playSong(int id)
    {
        return begin_playSong(id, null, false, null);
    }

    public Ice.AsyncResult begin_playSong(int id, java.util.Map<String, String> __ctx)
    {
        return begin_playSong(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_playSong(int id, Ice.Callback __cb)
    {
        return begin_playSong(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_playSong(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_playSong(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_playSong(int id, Callback_InterfaceMP3_playSong __cb)
    {
        return begin_playSong(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_playSong(int id, java.util.Map<String, String> __ctx, Callback_InterfaceMP3_playSong __cb)
    {
        return begin_playSong(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_playSong(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __playSong_name, __cb);
        try
        {
            __result.__prepare(__playSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_playSong(Ice.AsyncResult __result)
    {
        __end(__result, __playSong_name);
    }

    private static final String __removeSong_name = "removeSong";

    public void removeSong(int id)
    {
        removeSong(id, null, false);
    }

    public void removeSong(int id, java.util.Map<String, String> __ctx)
    {
        removeSong(id, __ctx, true);
    }

    private void removeSong(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "removeSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _InterfaceMP3Del __del = (_InterfaceMP3Del)__delBase;
                    __del.removeSong(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_removeSong(int id)
    {
        return begin_removeSong(id, null, false, null);
    }

    public Ice.AsyncResult begin_removeSong(int id, java.util.Map<String, String> __ctx)
    {
        return begin_removeSong(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeSong(int id, Ice.Callback __cb)
    {
        return begin_removeSong(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeSong(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeSong(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeSong(int id, Callback_InterfaceMP3_removeSong __cb)
    {
        return begin_removeSong(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeSong(int id, java.util.Map<String, String> __ctx, Callback_InterfaceMP3_removeSong __cb)
    {
        return begin_removeSong(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeSong(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeSong_name, __cb);
        try
        {
            __result.__prepare(__removeSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_removeSong(Ice.AsyncResult __result)
    {
        __end(__result, __removeSong_name);
    }

    private static final String __removeTagSong_name = "removeTagSong";

    public void removeTagSong(int id, String name)
    {
        removeTagSong(id, name, null, false);
    }

    public void removeTagSong(int id, String name, java.util.Map<String, String> __ctx)
    {
        removeTagSong(id, name, __ctx, true);
    }

    private void removeTagSong(int id, String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "removeTagSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _InterfaceMP3Del __del = (_InterfaceMP3Del)__delBase;
                    __del.removeTagSong(id, name, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_removeTagSong(int id, String name)
    {
        return begin_removeTagSong(id, name, null, false, null);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, String name, java.util.Map<String, String> __ctx)
    {
        return begin_removeTagSong(id, name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, String name, Ice.Callback __cb)
    {
        return begin_removeTagSong(id, name, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeTagSong(id, name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, String name, Callback_InterfaceMP3_removeTagSong __cb)
    {
        return begin_removeTagSong(id, name, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, String name, java.util.Map<String, String> __ctx, Callback_InterfaceMP3_removeTagSong __cb)
    {
        return begin_removeTagSong(id, name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeTagSong(int id, String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeTagSong_name, __cb);
        try
        {
            __result.__prepare(__removeTagSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeString(name);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_removeTagSong(Ice.AsyncResult __result)
    {
        __end(__result, __removeTagSong_name);
    }

    private static final String __searchSongs_name = "searchSongs";

    public Song[] searchSongs(String nameRegex, String artistRegex)
    {
        return searchSongs(nameRegex, artistRegex, null, false);
    }

    public Song[] searchSongs(String nameRegex, String artistRegex, java.util.Map<String, String> __ctx)
    {
        return searchSongs(nameRegex, artistRegex, __ctx, true);
    }

    private Song[] searchSongs(String nameRegex, String artistRegex, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "searchSongs", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("searchSongs");
                    __delBase = __getDelegate(false);
                    _InterfaceMP3Del __del = (_InterfaceMP3Del)__delBase;
                    return __del.searchSongs(nameRegex, artistRegex, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, String artistRegex)
    {
        return begin_searchSongs(nameRegex, artistRegex, null, false, null);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, String artistRegex, java.util.Map<String, String> __ctx)
    {
        return begin_searchSongs(nameRegex, artistRegex, __ctx, true, null);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, String artistRegex, Ice.Callback __cb)
    {
        return begin_searchSongs(nameRegex, artistRegex, null, false, __cb);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, String artistRegex, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_searchSongs(nameRegex, artistRegex, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, String artistRegex, Callback_InterfaceMP3_searchSongs __cb)
    {
        return begin_searchSongs(nameRegex, artistRegex, null, false, __cb);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, String artistRegex, java.util.Map<String, String> __ctx, Callback_InterfaceMP3_searchSongs __cb)
    {
        return begin_searchSongs(nameRegex, artistRegex, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_searchSongs(String nameRegex, String artistRegex, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__searchSongs_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __searchSongs_name, __cb);
        try
        {
            __result.__prepare(__searchSongs_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nameRegex);
            __os.writeString(artistRegex);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Song[] end_searchSongs(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __searchSongs_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            Song[] __ret;
            __ret = SongSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __stopSong_name = "stopSong";

    public void stopSong()
    {
        stopSong(null, false);
    }

    public void stopSong(java.util.Map<String, String> __ctx)
    {
        stopSong(__ctx, true);
    }

    private void stopSong(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "stopSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _InterfaceMP3Del __del = (_InterfaceMP3Del)__delBase;
                    __del.stopSong(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_stopSong()
    {
        return begin_stopSong(null, false, null);
    }

    public Ice.AsyncResult begin_stopSong(java.util.Map<String, String> __ctx)
    {
        return begin_stopSong(__ctx, true, null);
    }

    public Ice.AsyncResult begin_stopSong(Ice.Callback __cb)
    {
        return begin_stopSong(null, false, __cb);
    }

    public Ice.AsyncResult begin_stopSong(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopSong(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_stopSong(Callback_InterfaceMP3_stopSong __cb)
    {
        return begin_stopSong(null, false, __cb);
    }

    public Ice.AsyncResult begin_stopSong(java.util.Map<String, String> __ctx, Callback_InterfaceMP3_stopSong __cb)
    {
        return begin_stopSong(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stopSong(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stopSong_name, __cb);
        try
        {
            __result.__prepare(__stopSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_stopSong(Ice.AsyncResult __result)
    {
        __end(__result, __stopSong_name);
    }

    public static InterfaceMP3Prx checkedCast(Ice.ObjectPrx __obj)
    {
        InterfaceMP3Prx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof InterfaceMP3Prx)
            {
                __d = (InterfaceMP3Prx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    InterfaceMP3PrxHelper __h = new InterfaceMP3PrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static InterfaceMP3Prx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        InterfaceMP3Prx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof InterfaceMP3Prx)
            {
                __d = (InterfaceMP3Prx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    InterfaceMP3PrxHelper __h = new InterfaceMP3PrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static InterfaceMP3Prx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        InterfaceMP3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    InterfaceMP3PrxHelper __h = new InterfaceMP3PrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static InterfaceMP3Prx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        InterfaceMP3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    InterfaceMP3PrxHelper __h = new InterfaceMP3PrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static InterfaceMP3Prx uncheckedCast(Ice.ObjectPrx __obj)
    {
        InterfaceMP3Prx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof InterfaceMP3Prx)
            {
                __d = (InterfaceMP3Prx)__obj;
            }
            else
            {
                InterfaceMP3PrxHelper __h = new InterfaceMP3PrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static InterfaceMP3Prx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        InterfaceMP3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            InterfaceMP3PrxHelper __h = new InterfaceMP3PrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::ArchDistrib::InterfaceMP3",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _InterfaceMP3DelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _InterfaceMP3DelD();
    }

    public static void __write(IceInternal.BasicStream __os, InterfaceMP3Prx v)
    {
        __os.writeProxy(v);
    }

    public static InterfaceMP3Prx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            InterfaceMP3PrxHelper result = new InterfaceMP3PrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
