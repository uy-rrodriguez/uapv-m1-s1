// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `InterfaceMP3.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ArchDistrib;

/**
 * Provides type-specific helper functions.
 **/
public final class InterfaceMP3PrxHelper extends Ice.ObjectPrxHelperBase implements InterfaceMP3Prx
{
    private static final String __addSong_name = "addSong";

    public void addSong(String name, String artist, String path)
    {
        addSong(name, artist, path, null, false);
    }

    public void addSong(String name, String artist, String path, java.util.Map<String, String> __ctx)
    {
        addSong(name, artist, path, __ctx, true);
    }

    private void addSong(String name, String artist, String path, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_addSong(begin_addSong(name, artist, path, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path)
    {
        return begin_addSong(name, artist, path, null, false, false, null);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, java.util.Map<String, String> __ctx)
    {
        return begin_addSong(name, artist, path, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, Ice.Callback __cb)
    {
        return begin_addSong(name, artist, path, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addSong(name, artist, path, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, Callback_InterfaceMP3_addSong __cb)
    {
        return begin_addSong(name, artist, path, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(String name, String artist, String path, java.util.Map<String, String> __ctx, Callback_InterfaceMP3_addSong __cb)
    {
        return begin_addSong(name, artist, path, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(String name, 
                                         String artist, 
                                         String path, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addSong(name, artist, path, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addSong(String name, 
                                         String artist, 
                                         String path, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addSong(name, artist, path, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_addSong(String name, 
                                         String artist, 
                                         String path, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addSong(name, artist, path, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addSong(String name, 
                                         String artist, 
                                         String path, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addSong(name, artist, path, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_addSong(String name, 
                                          String artist, 
                                          String path, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addSong(name, 
                             artist, 
                             path, 
                             __ctx, 
                             __explicitCtx, 
                             __synchronous, 
                             new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_addSong(String name, 
                                          String artist, 
                                          String path, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__addSong_name, __cb);
        try
        {
            __result.prepare(__addSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __os.writeString(artist);
            __os.writeString(path);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_addSong(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __addSong_name);
    }

    private static final String __addTagSong_name = "addTagSong";

    public void addTagSong(int id, String name)
    {
        addTagSong(id, name, null, false);
    }

    public void addTagSong(int id, String name, java.util.Map<String, String> __ctx)
    {
        addTagSong(id, name, __ctx, true);
    }

    private void addTagSong(int id, String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_addTagSong(begin_addTagSong(id, name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_addTagSong(int id, String name)
    {
        return begin_addTagSong(id, name, null, false, false, null);
    }

    public Ice.AsyncResult begin_addTagSong(int id, String name, java.util.Map<String, String> __ctx)
    {
        return begin_addTagSong(id, name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_addTagSong(int id, String name, Ice.Callback __cb)
    {
        return begin_addTagSong(id, name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addTagSong(int id, String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addTagSong(id, name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addTagSong(int id, String name, Callback_InterfaceMP3_addTagSong __cb)
    {
        return begin_addTagSong(id, name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addTagSong(int id, String name, java.util.Map<String, String> __ctx, Callback_InterfaceMP3_addTagSong __cb)
    {
        return begin_addTagSong(id, name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addTagSong(int id, 
                                            String name, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addTagSong(id, name, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addTagSong(int id, 
                                            String name, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addTagSong(id, name, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_addTagSong(int id, 
                                            String name, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addTagSong(id, name, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addTagSong(int id, 
                                            String name, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addTagSong(id, name, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_addTagSong(int id, 
                                             String name, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addTagSong(id, 
                                name, 
                                __ctx, 
                                __explicitCtx, 
                                __synchronous, 
                                new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_addTagSong(int id, 
                                             String name, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__addTagSong_name, __cb);
        try
        {
            __result.prepare(__addTagSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_addTagSong(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __addTagSong_name);
    }

    private static final String __listSongs_name = "listSongs";

    public Song[] listSongs()
    {
        return listSongs(null, false);
    }

    public Song[] listSongs(java.util.Map<String, String> __ctx)
    {
        return listSongs(__ctx, true);
    }

    private Song[] listSongs(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__listSongs_name);
        return end_listSongs(begin_listSongs(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_listSongs()
    {
        return begin_listSongs(null, false, false, null);
    }

    public Ice.AsyncResult begin_listSongs(java.util.Map<String, String> __ctx)
    {
        return begin_listSongs(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_listSongs(Ice.Callback __cb)
    {
        return begin_listSongs(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_listSongs(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_listSongs(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_listSongs(Callback_InterfaceMP3_listSongs __cb)
    {
        return begin_listSongs(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_listSongs(java.util.Map<String, String> __ctx, Callback_InterfaceMP3_listSongs __cb)
    {
        return begin_listSongs(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_listSongs(IceInternal.Functional_GenericCallback1<Song[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_listSongs(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_listSongs(IceInternal.Functional_GenericCallback1<Song[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_listSongs(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_listSongs(java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<Song[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_listSongs(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_listSongs(java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<Song[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_listSongs(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_listSongs(java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<Song[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_listSongs(__ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<ArchDistrib.Song[]>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           InterfaceMP3PrxHelper.__listSongs_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_listSongs(java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__listSongs_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__listSongs_name, __cb);
        try
        {
            __result.prepare(__listSongs_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Song[] end_listSongs(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __listSongs_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Song[] __ret;
            __ret = SongSeqHelper.read(__is);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __listSongs_completed(Ice.TwowayCallbackArg1<Song[]> __cb, Ice.AsyncResult __result)
    {
        ArchDistrib.InterfaceMP3Prx __proxy = (ArchDistrib.InterfaceMP3Prx)__result.getProxy();
        Song[] __ret = null;
        try
        {
            __ret = __proxy.end_listSongs(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __playSong_name = "playSong";

    public float[] playSong(int id)
    {
        return playSong(id, null, false);
    }

    public float[] playSong(int id, java.util.Map<String, String> __ctx)
    {
        return playSong(id, __ctx, true);
    }

    private float[] playSong(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__playSong_name);
        return end_playSong(begin_playSong(id, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_playSong(int id)
    {
        return begin_playSong(id, null, false, false, null);
    }

    public Ice.AsyncResult begin_playSong(int id, java.util.Map<String, String> __ctx)
    {
        return begin_playSong(id, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_playSong(int id, Ice.Callback __cb)
    {
        return begin_playSong(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_playSong(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_playSong(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_playSong(int id, Callback_InterfaceMP3_playSong __cb)
    {
        return begin_playSong(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_playSong(int id, java.util.Map<String, String> __ctx, Callback_InterfaceMP3_playSong __cb)
    {
        return begin_playSong(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_playSong(int id, 
                                          IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_playSong(id, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_playSong(int id, 
                                          IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_playSong(id, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_playSong(int id, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_playSong(id, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_playSong(int id, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_playSong(id, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_playSong(int id, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_playSong(id, __ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackArg1<float[]>(__responseCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          InterfaceMP3PrxHelper.__playSong_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_playSong(int id, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__playSong_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__playSong_name, __cb);
        try
        {
            __result.prepare(__playSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public float[] end_playSong(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __playSong_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            float[] __ret;
            __ret = DataSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __playSong_completed(Ice.TwowayCallbackArg1<float[]> __cb, Ice.AsyncResult __result)
    {
        ArchDistrib.InterfaceMP3Prx __proxy = (ArchDistrib.InterfaceMP3Prx)__result.getProxy();
        float[] __ret = null;
        try
        {
            __ret = __proxy.end_playSong(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __removeSong_name = "removeSong";

    public void removeSong(int id)
    {
        removeSong(id, null, false);
    }

    public void removeSong(int id, java.util.Map<String, String> __ctx)
    {
        removeSong(id, __ctx, true);
    }

    private void removeSong(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_removeSong(begin_removeSong(id, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_removeSong(int id)
    {
        return begin_removeSong(id, null, false, false, null);
    }

    public Ice.AsyncResult begin_removeSong(int id, java.util.Map<String, String> __ctx)
    {
        return begin_removeSong(id, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_removeSong(int id, Ice.Callback __cb)
    {
        return begin_removeSong(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_removeSong(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeSong(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_removeSong(int id, Callback_InterfaceMP3_removeSong __cb)
    {
        return begin_removeSong(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_removeSong(int id, java.util.Map<String, String> __ctx, Callback_InterfaceMP3_removeSong __cb)
    {
        return begin_removeSong(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_removeSong(int id, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_removeSong(id, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_removeSong(int id, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeSong(id, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_removeSong(int id, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_removeSong(id, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_removeSong(int id, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeSong(id, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_removeSong(int id, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeSong(id, 
                                __ctx, 
                                __explicitCtx, 
                                __synchronous, 
                                new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_removeSong(int id, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__removeSong_name, __cb);
        try
        {
            __result.prepare(__removeSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_removeSong(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __removeSong_name);
    }

    private static final String __removeTagSong_name = "removeTagSong";

    public void removeTagSong(int id, String name)
    {
        removeTagSong(id, name, null, false);
    }

    public void removeTagSong(int id, String name, java.util.Map<String, String> __ctx)
    {
        removeTagSong(id, name, __ctx, true);
    }

    private void removeTagSong(int id, String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_removeTagSong(begin_removeTagSong(id, name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_removeTagSong(int id, String name)
    {
        return begin_removeTagSong(id, name, null, false, false, null);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, String name, java.util.Map<String, String> __ctx)
    {
        return begin_removeTagSong(id, name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, String name, Ice.Callback __cb)
    {
        return begin_removeTagSong(id, name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeTagSong(id, name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, String name, Callback_InterfaceMP3_removeTagSong __cb)
    {
        return begin_removeTagSong(id, name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, String name, java.util.Map<String, String> __ctx, Callback_InterfaceMP3_removeTagSong __cb)
    {
        return begin_removeTagSong(id, name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, 
                                               String name, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_removeTagSong(id, name, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, 
                                               String name, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeTagSong(id, name, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, 
                                               String name, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_removeTagSong(id, name, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_removeTagSong(int id, 
                                               String name, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeTagSong(id, name, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_removeTagSong(int id, 
                                                String name, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeTagSong(id, 
                                   name, 
                                   __ctx, 
                                   __explicitCtx, 
                                   __synchronous, 
                                   new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_removeTagSong(int id, 
                                                String name, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__removeTagSong_name, __cb);
        try
        {
            __result.prepare(__removeTagSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_removeTagSong(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __removeTagSong_name);
    }

    private static final String __searchSongs_name = "searchSongs";

    public Song[] searchSongs(String nameRegex, String artistRegex)
    {
        return searchSongs(nameRegex, artistRegex, null, false);
    }

    public Song[] searchSongs(String nameRegex, String artistRegex, java.util.Map<String, String> __ctx)
    {
        return searchSongs(nameRegex, artistRegex, __ctx, true);
    }

    private Song[] searchSongs(String nameRegex, String artistRegex, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__searchSongs_name);
        return end_searchSongs(begin_searchSongs(nameRegex, artistRegex, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, String artistRegex)
    {
        return begin_searchSongs(nameRegex, artistRegex, null, false, false, null);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, String artistRegex, java.util.Map<String, String> __ctx)
    {
        return begin_searchSongs(nameRegex, artistRegex, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, String artistRegex, Ice.Callback __cb)
    {
        return begin_searchSongs(nameRegex, artistRegex, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, String artistRegex, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_searchSongs(nameRegex, artistRegex, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, String artistRegex, Callback_InterfaceMP3_searchSongs __cb)
    {
        return begin_searchSongs(nameRegex, artistRegex, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, String artistRegex, java.util.Map<String, String> __ctx, Callback_InterfaceMP3_searchSongs __cb)
    {
        return begin_searchSongs(nameRegex, artistRegex, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, 
                                             String artistRegex, 
                                             IceInternal.Functional_GenericCallback1<Song[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_searchSongs(nameRegex, artistRegex, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, 
                                             String artistRegex, 
                                             IceInternal.Functional_GenericCallback1<Song[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_searchSongs(nameRegex, artistRegex, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, 
                                             String artistRegex, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<Song[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_searchSongs(nameRegex, artistRegex, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_searchSongs(String nameRegex, 
                                             String artistRegex, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<Song[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_searchSongs(nameRegex, artistRegex, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_searchSongs(String nameRegex, 
                                              String artistRegex, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<Song[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_searchSongs(nameRegex, artistRegex, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<ArchDistrib.Song[]>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             InterfaceMP3PrxHelper.__searchSongs_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_searchSongs(String nameRegex, 
                                              String artistRegex, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__searchSongs_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__searchSongs_name, __cb);
        try
        {
            __result.prepare(__searchSongs_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nameRegex);
            __os.writeString(artistRegex);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Song[] end_searchSongs(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __searchSongs_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Song[] __ret;
            __ret = SongSeqHelper.read(__is);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __searchSongs_completed(Ice.TwowayCallbackArg1<Song[]> __cb, Ice.AsyncResult __result)
    {
        ArchDistrib.InterfaceMP3Prx __proxy = (ArchDistrib.InterfaceMP3Prx)__result.getProxy();
        Song[] __ret = null;
        try
        {
            __ret = __proxy.end_searchSongs(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __shutdown_name = "shutdown";

    public void shutdown()
    {
        shutdown(null, false);
    }

    public void shutdown(java.util.Map<String, String> __ctx)
    {
        shutdown(__ctx, true);
    }

    private void shutdown(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_shutdown(begin_shutdown(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_shutdown()
    {
        return begin_shutdown(null, false, false, null);
    }

    public Ice.AsyncResult begin_shutdown(java.util.Map<String, String> __ctx)
    {
        return begin_shutdown(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_shutdown(Ice.Callback __cb)
    {
        return begin_shutdown(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_shutdown(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_shutdown(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_shutdown(Callback_InterfaceMP3_shutdown __cb)
    {
        return begin_shutdown(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_shutdown(java.util.Map<String, String> __ctx, Callback_InterfaceMP3_shutdown __cb)
    {
        return begin_shutdown(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_shutdown(IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_shutdown(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_shutdown(IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_shutdown(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_shutdown(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_shutdown(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_shutdown(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_shutdown(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_shutdown(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_shutdown(__ctx, 
                              __explicitCtx, 
                              __synchronous, 
                              new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_shutdown(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__shutdown_name, __cb);
        try
        {
            __result.prepare(__shutdown_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_shutdown(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __shutdown_name);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static InterfaceMP3Prx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), InterfaceMP3Prx.class, InterfaceMP3PrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static InterfaceMP3Prx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), InterfaceMP3Prx.class, InterfaceMP3PrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static InterfaceMP3Prx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), InterfaceMP3Prx.class, InterfaceMP3PrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static InterfaceMP3Prx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), InterfaceMP3Prx.class, InterfaceMP3PrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static InterfaceMP3Prx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, InterfaceMP3Prx.class, InterfaceMP3PrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static InterfaceMP3Prx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, InterfaceMP3Prx.class, InterfaceMP3PrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::ArchDistrib::InterfaceMP3",
        "::Ice::Object"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[0];
    }

    public static void __write(IceInternal.BasicStream __os, InterfaceMP3Prx v)
    {
        __os.writeProxy(v);
    }

    public static InterfaceMP3Prx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            InterfaceMP3PrxHelper result = new InterfaceMP3PrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
