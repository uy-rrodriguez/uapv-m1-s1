// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `InterfaceMP3.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <InterfaceMP3.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __ArchDistrib__InterfaceMP3__printString_name = "printString";

}
::IceProxy::Ice::Object* ::IceProxy::ArchDistrib::upCast(::IceProxy::ArchDistrib::Tag* p) { return p; }

void
::IceProxy::ArchDistrib::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::ArchDistrib::Tag>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::ArchDistrib::Tag;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::ArchDistrib::Tag::ice_staticId()
{
    return ::ArchDistrib::Tag::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::ArchDistrib::Tag::__newInstance() const
{
    return new Tag;
}
::IceProxy::Ice::Object* ::IceProxy::ArchDistrib::upCast(::IceProxy::ArchDistrib::Song* p) { return p; }

void
::IceProxy::ArchDistrib::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::ArchDistrib::Song>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::ArchDistrib::Song;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::ArchDistrib::Song::ice_staticId()
{
    return ::ArchDistrib::Song::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::ArchDistrib::Song::__newInstance() const
{
    return new Song;
}
::IceProxy::Ice::Object* ::IceProxy::ArchDistrib::upCast(::IceProxy::ArchDistrib::SongModel* p) { return p; }

void
::IceProxy::ArchDistrib::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::ArchDistrib::SongModel>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::ArchDistrib::SongModel;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::ArchDistrib::SongModel::ice_staticId()
{
    return ::ArchDistrib::SongModel::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::ArchDistrib::SongModel::__newInstance() const
{
    return new SongModel;
}
::IceProxy::Ice::Object* ::IceProxy::ArchDistrib::upCast(::IceProxy::ArchDistrib::InterfaceMP3* p) { return p; }

void
::IceProxy::ArchDistrib::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::ArchDistrib::InterfaceMP3>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::ArchDistrib::InterfaceMP3;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::ArchDistrib::InterfaceMP3::printString(const ::std::string& __p_s, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __ArchDistrib__InterfaceMP3__printString_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_s);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::ArchDistrib::InterfaceMP3::begin_printString(const ::std::string& __p_s, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __ArchDistrib__InterfaceMP3__printString_name, __del, __cookie);
    try
    {
        __result->prepare(__ArchDistrib__InterfaceMP3__printString_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_s);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::ArchDistrib::InterfaceMP3::end_printString(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __ArchDistrib__InterfaceMP3__printString_name);
}

const ::std::string&
IceProxy::ArchDistrib::InterfaceMP3::ice_staticId()
{
    return ::ArchDistrib::InterfaceMP3::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::ArchDistrib::InterfaceMP3::__newInstance() const
{
    return new InterfaceMP3;
}

::Ice::Object* ArchDistrib::upCast(::ArchDistrib::Tag* p) { return p; }
::Ice::ObjectPtr
ArchDistrib::Tag::ice_clone() const
{
    ::Ice::Object* __p = new Tag(*this);
    return __p;
}

namespace
{
const ::std::string __ArchDistrib__Tag_ids[2] =
{
    "::ArchDistrib::Tag",
    "::Ice::Object"
};

}

bool
ArchDistrib::Tag::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__ArchDistrib__Tag_ids, __ArchDistrib__Tag_ids + 2, _s);
}

::std::vector< ::std::string>
ArchDistrib::Tag::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__ArchDistrib__Tag_ids[0], &__ArchDistrib__Tag_ids[2]);
}

const ::std::string&
ArchDistrib::Tag::ice_id(const ::Ice::Current&) const
{
    return __ArchDistrib__Tag_ids[0];
}

const ::std::string&
ArchDistrib::Tag::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::ArchDistrib::Tag";
    return typeId;
#else
    return __ArchDistrib__Tag_ids[0];
#endif
}

void
ArchDistrib::Tag::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(name);
    __os->endWriteSlice();
}

void
ArchDistrib::Tag::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultObjectFactoryInit< ::ArchDistrib::Tag> __ArchDistrib__Tag_init("::ArchDistrib::Tag");
}

::Ice::ObjectFactoryPtr
ArchDistrib::Tag::ice_factory()
{
    return ::IceInternal::factoryTable->getObjectFactory(::ArchDistrib::Tag::ice_staticId());
}

void 
ArchDistrib::__patch(TagPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::ArchDistrib::TagPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::ArchDistrib::Tag::ice_staticId(), v);
    }
}

::Ice::Object* ArchDistrib::upCast(::ArchDistrib::Song* p) { return p; }

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
ArchDistrib::Song::ice_clone() const
{
    ::Ice::Object* __p = new Song(*this);
    return __p;
}
#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string __ArchDistrib__Song_ids[2] =
{
    "::ArchDistrib::Song",
    "::Ice::Object"
};

}

bool
ArchDistrib::Song::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__ArchDistrib__Song_ids, __ArchDistrib__Song_ids + 2, _s);
}

::std::vector< ::std::string>
ArchDistrib::Song::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__ArchDistrib__Song_ids[0], &__ArchDistrib__Song_ids[2]);
}

const ::std::string&
ArchDistrib::Song::ice_id(const ::Ice::Current&) const
{
    return __ArchDistrib__Song_ids[0];
}

const ::std::string&
ArchDistrib::Song::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::ArchDistrib::Song";
    return typeId;
#else
    return __ArchDistrib__Song_ids[0];
#endif
}

void
ArchDistrib::Song::__gcVisitMembers(::IceInternal::GCVisitor& _v)
{
    {
        for(::ArchDistrib::TagSeq::iterator _i0 = tags.begin(); _i0 != tags.end(); ++_i0)
        {
            if((*_i0))
            {
                if((::ArchDistrib::upCast((*_i0).get())->__gcVisit(_v)))
                {
                    (*_i0) = 0;
                }
            }
        }
    }
}

void
ArchDistrib::Song::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(name);
    __os->write(artist);
    __os->write(data);
    __os->write(tags);
    __os->endWriteSlice();
}

void
ArchDistrib::Song::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->read(artist);
    __is->read(data);
    __is->read(tags);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultObjectFactoryInit< ::ArchDistrib::Song> __ArchDistrib__Song_init("::ArchDistrib::Song");
}

::Ice::ObjectFactoryPtr
ArchDistrib::Song::ice_factory()
{
    return ::IceInternal::factoryTable->getObjectFactory(::ArchDistrib::Song::ice_staticId());
}

void 
ArchDistrib::__patch(SongPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::ArchDistrib::SongPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::ArchDistrib::Song::ice_staticId(), v);
    }
}

::Ice::Object* ArchDistrib::upCast(::ArchDistrib::SongModel* p) { return p; }
::Ice::ObjectPtr
ArchDistrib::SongModel::ice_clone() const
{
    ::Ice::Object* __p = new SongModel(*this);
    return __p;
}

namespace
{
const ::std::string __ArchDistrib__SongModel_ids[3] =
{
    "::ArchDistrib::Song",
    "::ArchDistrib::SongModel",
    "::Ice::Object"
};

}

bool
ArchDistrib::SongModel::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__ArchDistrib__SongModel_ids, __ArchDistrib__SongModel_ids + 3, _s);
}

::std::vector< ::std::string>
ArchDistrib::SongModel::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__ArchDistrib__SongModel_ids[0], &__ArchDistrib__SongModel_ids[3]);
}

const ::std::string&
ArchDistrib::SongModel::ice_id(const ::Ice::Current&) const
{
    return __ArchDistrib__SongModel_ids[1];
}

const ::std::string&
ArchDistrib::SongModel::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::ArchDistrib::SongModel";
    return typeId;
#else
    return __ArchDistrib__SongModel_ids[1];
#endif
}

void
ArchDistrib::SongModel::__gcVisitMembers(::IceInternal::GCVisitor& _v)
{
    ::ArchDistrib::Song::__gcVisitMembers(_v);
}

void
ArchDistrib::SongModel::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(path);
    __os->endWriteSlice();
    ::ArchDistrib::Song::__writeImpl(__os);
}

void
ArchDistrib::SongModel::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(path);
    __is->endReadSlice();
    ::ArchDistrib::Song::__readImpl(__is);
}

namespace
{

const ::IceInternal::DefaultObjectFactoryInit< ::ArchDistrib::SongModel> __ArchDistrib__SongModel_init("::ArchDistrib::SongModel");
}

::Ice::ObjectFactoryPtr
ArchDistrib::SongModel::ice_factory()
{
    return ::IceInternal::factoryTable->getObjectFactory(::ArchDistrib::SongModel::ice_staticId());
}

void 
ArchDistrib::__patch(SongModelPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::ArchDistrib::SongModelPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::ArchDistrib::SongModel::ice_staticId(), v);
    }
}

::Ice::Object* ArchDistrib::upCast(::ArchDistrib::InterfaceMP3* p) { return p; }

namespace
{
const ::std::string __ArchDistrib__InterfaceMP3_ids[2] =
{
    "::ArchDistrib::InterfaceMP3",
    "::Ice::Object"
};

}

bool
ArchDistrib::InterfaceMP3::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__ArchDistrib__InterfaceMP3_ids, __ArchDistrib__InterfaceMP3_ids + 2, _s);
}

::std::vector< ::std::string>
ArchDistrib::InterfaceMP3::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__ArchDistrib__InterfaceMP3_ids[0], &__ArchDistrib__InterfaceMP3_ids[2]);
}

const ::std::string&
ArchDistrib::InterfaceMP3::ice_id(const ::Ice::Current&) const
{
    return __ArchDistrib__InterfaceMP3_ids[0];
}

const ::std::string&
ArchDistrib::InterfaceMP3::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::ArchDistrib::InterfaceMP3";
    return typeId;
#else
    return __ArchDistrib__InterfaceMP3_ids[0];
#endif
}

::Ice::DispatchStatus
ArchDistrib::InterfaceMP3::___printString(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_s;
    __is->read(__p_s);
    __inS.endReadParams();
    printString(__p_s, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __ArchDistrib__InterfaceMP3_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "printString"
};

}

::Ice::DispatchStatus
ArchDistrib::InterfaceMP3::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__ArchDistrib__InterfaceMP3_all, __ArchDistrib__InterfaceMP3_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __ArchDistrib__InterfaceMP3_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___printString(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
ArchDistrib::InterfaceMP3::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
ArchDistrib::InterfaceMP3::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
ArchDistrib::__patch(InterfaceMP3Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::ArchDistrib::InterfaceMP3Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::ArchDistrib::InterfaceMP3::ice_staticId(), v);
    }
}
